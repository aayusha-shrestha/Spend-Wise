@page "/transactions"

<div class="d-flex justify-content-between mt-5 mb-5">
    <div><h1 class="mb-0 h3">Transactions</h1></div>
    <div>
        <button class="btn btn-primary" type="button" @onclick="OpenAddTransactionDialog">
            <span class="oi oi-plus" /> Add
        </button>
    </div>
</div>

<h4 style="margin-bottom: 1rem; color: #777777;">Current Balance: @_balance</h4>

<!-- Filter -->
<div class="d-flex align-items-center gap-3">
    <!-- Search By Title -->
    <input type="search" class="form-control search" placeholder="Search by title" @oninput="SearchTransactionTitle" />
    <!-- Transaction Type Filter -->
    <select class="form-control" @onchange="FilterByTransactionType">
        <option value="">Select Transaction Type</option>
        @foreach (var type in Enum.GetValues(typeof(TransactionType)).Cast<TransactionType>())
        {
            <option value="@type">@type</option>
        }
    </select>
    <!-- Tags Filter -->
    <select class="form-control" @onchange="FilterByTag">
        <option value="">Select Tag</option>
        @foreach (var tag in _tags)
        {
            <option value="@tag.Name">@tag.Name</option>
        }
    </select>
    <!-- Date Filter -->
    <input type="date" class="form-control" placeholder="Select Date" @onchange="FilterBySpecificDate" />
</div>
<div class="mt-5 ml-2">
    <!-- Date Range Filter -->
    <MudStack>
        <MudDateRangePicker @ref="_picker" DateRangeChanged="OnDateRangeChanged"
                        AutoClose="@_autoClose" PickerVariant="PickerVariant.Dialog" Class="custom-width" Label="Select Date Range">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
            <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
        </PickerActions>
        </MudDateRangePicker>
    </MudStack>
</div>
<!-- Filter Ends -->

<!--Transaction List-->
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Title</th>
            <th>Transaction Type</th>
            <th>Amount</th>
            <th>Tag</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in _transactions)
        {
            <tr>
                <td>@transaction.CreatedAt.ToString("MMM dd, yyyy")</td>
                <td>@transaction.Title</td>
                <td>@transaction.Type</td>
                <td>
                    @if (_globalState?.CurrentUser != null)
                    {
                        @Utils.GetFormattedAmount(transaction.Amount, _globalState.CurrentUser.Currency)
                    }
                </td>
                <td>
                    @if (transaction.Tags != null && transaction.Tags.Any())
                    {
                        @foreach (var tag in transaction.Tags)
                        {
                            <span>@tag</span>
                            @if (tag != transaction.Tags.Last())
                            {
                                @:,&nbsp;
                            }
                        }
                    }
                    else
                    {
                        @:N/A
                    }
                </td>
               <td>@(string.IsNullOrEmpty(transaction.Notes) ? "N/A" : transaction.Notes)</td>
            </tr>
        }
    </tbody>
</table>
<!--Transaction List End-->

<!-- Add Transaction Dialog -->
<MudDialog @ref="AddTransactionDialog">
    <DialogContent>
        <MudDialogTitle Style="font-size: 1.5rem;">Add New Transaction</MudDialogTitle>
        <MudForm @bind-IsValid="IsFormValid" @ref="TransactionForm">
            <MudTextField Label="Title" @bind-Value="_newTransaction.Title" Required="true" />
            <MudNumericField Label="Amount" @bind-Value="_newTransaction.Amount" Required="true" Min="0" />
            <MudSelect Label="Transaction Type" @bind-Value="_newTransaction.Type" Required="true">
                <MudSelectItem Value="TransactionType.Credit">Credit</MudSelectItem>
                <MudSelectItem Value="TransactionType.Debit">Debit</MudSelectItem>
            </MudSelect>
            <div class="tags-container">
                <label for="tags" class="tags-label">Tags</label>
                <div class="checkbox-group">
                    @foreach (var tag in _tags)
                    {
                        <div class="checkbox-item">
                            <input type="checkbox"
                                   id="@tag.Name"
                                   value="@tag.Name"
                                   checked="@GetCheckedState(tag.Name)"
                                   @onchange="(e) => storeTags(e, tag.Name)" />
                            <label for="@tag.Name">@tag.Name</label>
                        </div>
                    }
                </div>
            </div>
            <MudTextField Label="Notes" @bind-Value="_newTransaction.Notes" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="SaveTransaction" Disabled="!IsFormValid">Save</MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>
<!-- Add Transaction Dialog End -->

<!-- Delete Transaction Dialog -->
<MudDialog @ref="DeleteTransactionDialog">
    <DialogContent>
        <MudText Typo="Typo.h6">Are you sure you want to delete this transaction?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteTransaction">Delete</MudButton>
        <MudButton Color="Color.Primary" OnClick="CancelDeleteDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>
<!-- Delete Transaction Dialog End -->

<MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true" Position="SnackbarPosition.TopCenter" />