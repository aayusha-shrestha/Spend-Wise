@using System.Globalization
@using MudBlazor

@page "/dashboard"

<h2 style="color: #2C6B2F; padding: 20px 20px 30px 20px;">
    Welcome @_globalState?.CurrentUser?.Username!
</h2>

<!-- Dashboard Statistics -->
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center">@_balance</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Current Balance</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center">@_totalTransactionCount</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Total Number Of Transaction</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center">@_balance</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Total Transactions</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Success">@_totalInflow</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Total Inflow</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">@_totalOutflow</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Total Outflow</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center">@_totalDebt</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Total Debt</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">@_totalPendingDebt</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Pending Debt</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="pa-2 fixed-height-card d-flex justify-center align-center">
                <MudText Typo="Typo.h6" Align="Align.Center">@_totalClearedDebt</MudText>
                <MudText Typo="Typo.caption" Align="Align.Center">Cleared Debt</MudText>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>
<!-- Dashboard Statistics End -->

<!-- Bar Chart -->
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-11">
    <MudText Typo="Typo.h6" Class="mb-2 mt-4">Top Inflows, Outflows, and Debts</MudText>
    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
    </MudChart>
</MudContainer>
<!-- Bar Chart End -->

<!-- Top 5 Highest Transaction -->
<div class="d-flex justify-content-between align-items-end" style="margin-top: 3rem;">
<h4 class="mt-0 pb-3">Top 5 Highest Transaction</h4>
<!-- Date Range Filter -->
    <MudStack>
        <MudDateRangePicker @ref="_picker" DateRangeChanged="OnDateRangeChanged"
                        AutoClose="@_autoClose" PickerVariant="PickerVariant.Dialog" Class="custom-width" Label="Select Date Range">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
            <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
        </PickerActions>
        </MudDateRangePicker>
    </MudStack>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Title</th>
            <th>Transaction Type</th>
            <th>Amount</th>
            <th>Tag</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in _fiveHighestTransaction)
        {
            <tr>
                <td>@transaction.CreatedAt.ToString("MMM dd, yyyy")</td>
                <td>@transaction.Title</td>
                <td>@transaction.Type</td>
                <td>
                    @if (_globalState?.CurrentUser != null)
                    {
                        @Utils.GetFormattedAmount(transaction.Amount, _globalState.CurrentUser.Currency)
                    }
                </td>
                <td>
                    @if (transaction.Tags != null && transaction.Tags.Any())
                    {
                        @foreach (var tag in transaction.Tags)
                        {
                            <span>@tag</span>
                            @if (tag != transaction.Tags.Last())
                            {
                                @:,&nbsp;
                            }
                        }
                    }
                    else
                    {
                        @:N/A
                    }
                </td>
                <td>@(string.IsNullOrEmpty(transaction.Notes) ? "N/A" : transaction.Notes)</td>
            </tr>
        }
    </tbody>
</table>
<!-- Top 5 Highest Transaction End -->

<!--Pending Debt List-->
<div class="d-flex justify-content-between align-items-end" style="margin-top: 3rem;">
    <h4 class="mt-0 pb-3">Pending Debts</h4>
<!-- Date Range Filter -->
    <MudStack>
        <MudDateRangePicker @ref="_pickerDebt" DateRangeChanged="OnPendingDateRangeChanged"
                        AutoClose="@_autoCloseDebt" PickerVariant="PickerVariant.Dialog" Class="custom-width" Label="Select Date Range">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _pickerDebt.ClearAsync())">Clear</MudButton>
            <MudButton OnClick="@(() => _pickerDebt.CloseAsync(false))">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => _pickerDebt.CloseAsync())">Ok</MudButton>
        </PickerActions>
        </MudDateRangePicker>
    </MudStack>
</div>
<table class="table pb-5">
    <thead>
        <tr>
            <th>Date</th>
            <th>Title</th>
            <th>Transaction Type</th>
            <th>Amount</th>
            <th>Source of Debt</th>
            <th>Tag</th>
            <th>Notes</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in _pendingDebts)
        {
            <tr>
                <td>@debt.CreatedAt.ToString("MMM dd, yyyy")</td>
                <td>@debt.Title</td>
                <td>@debt.Type</td>
                <td>
                    @if (_globalState?.CurrentUser != null)
                    {
                        @Utils.GetFormattedAmount(debt.Amount, _globalState.CurrentUser.Currency)
                    }
                </td>
                <td>@debt.SourceOfDebt</td>
                <td>
                    @if (debt.Tags != null && debt.Tags.Any())
                    {
                        @foreach (var tag in debt.Tags)
                        {
                            <span>@tag</span>
                            @if (tag != debt.Tags.Last())
                            {
                                @:,&nbsp;
                            }
                        }
                    }
                    else
                    {
                        @:N/A
                    }
                </td>
                <td>@(string.IsNullOrEmpty(debt.Notes) ? "N/A" : debt.Notes)</td>
                <td>@debt.DueDate?.ToString("MMM dd, yyyy")</td>
                <td>
                    <span class="@(debt.Status == 0 ? "status-pending" : "status-cleared")">@debt.Status</span>
                </td>
                <td>
                    @if (debt.Status == 0)
                    {
                        <button type="button" @onclick="()=>OpenClearDebtDialog(debt)" class="btn btn-primary">
                            <span class="oi oi-check" /> Clear
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<!--Pending Debt List End-->

<!-- Clear Debt Dialog -->
<MudDialog @ref="ClearDebtDialog">
    <DialogContent>
        <MudText Typo="Typo.h6">Are you sure you want to clear this debt?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="ClearDebt">Clear</MudButton>
        <MudButton Color="Color.Primary" OnClick="CancelClearDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>
<!-- Clear Debt Dialog End -->



